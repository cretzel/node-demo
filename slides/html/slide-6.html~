<h3>Event-driven asynchronous callbacks</h3>

<ul>

<div class="bordered code"><pre>
var result = database.query("SELECT * FROM hugetable");
console.log("Hello World");
</pre></div>

<li>In node.js there is only one single process. If there is a slow database query somewhere in this process, this affects the whole process - everything comes to a halt until the slow query has finished. </li>
<li>
<div class="bordered code"><pre>
database.query("SELECT * FROM hugetable", function(rows) {
  var result = rows;
});
console.log("Hello World");
</pre></div>
</li>
<li>Now, Node.js can handle the database request asynchronously. Provided that database.query() is part of an asynchronous library, this is what Node.js does: just as before, it takes the query and sends it to the database. But instead of waiting for it to be finished, it makes a mental note that says "When at some point in the future the database server is done and sends the result of the query, then I have to execute the anonymous function that was passed to database.query()."

Then, it immediately executes console.log(), and afterwards, it enters the event loop. Node.js continuously cycles through this loop again and again whenever there is nothing else to do, waiting for events. Events like, e.g., a slow database query finally delivering its results. </li>

</ul>
